window.requestAnimFrame = function () {
    var t = navigator.userAgent;
    return -1 != t.search(/iPhone/) || -1 != t.search(/iPod/) || -1 != t.search(/iPad/) ?
        function (t) {
            window.setTimeout(t, 1e3 / 60)
        } : window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame ||
        function (t) { window.setTimeout(t, 1e3 / 60) }
}();
var AnimFrame = function () {
    function t() { } function e() { for (var t = 0, e = s.length; e > t; t++)s[t].init() } function n() { i && requestAnimFrame(function () { n() }); for (var t = 0, e = s.length; e > t; t++)s[t].render() } var i, s = []; return t.prototype.push = function (t) { s.push(t) }, t.prototype.stop = function () { i = !1 }, t.prototype.start = function () { i = !0, e(), n() }, t
}(), AnimCanvas = function () { function t() { this.id, this.canvas, this.context, this.time, this.startTime, this.fps, this.fpsStep, this.fpsTime } return t.prototype.setCanvas = function (t) { this.id = t, this.canvas = document.getElementById(this.id), this.context = this.canvas.getContext("2d") }, t.prototype.createCanvas = function (t, e) { this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d"), this.canvas.width = t, this.canvas.height = e }, t.prototype.setFps = function (t) { this.fps = t, this.fpsStep = 1e3 / t, this.fpsFrame }, t.prototype.init = function () { this.startTime = (new Date).getTime() }, t.prototype.render = function () { if (this.time = (new Date).getTime() - this.startTime, this.fps) { var t = this.time % 1e3, e = Math.floor(t / this.fpsStep); this.fpsFrame != e && (this.fpsFrame = e, this.draw()) } else this.draw() }, t }(), SimpleCanvas = function () { function t() { this.id, this.canvas, this.context } return t.prototype.setCanvas = function (t) { this.id = t, this.canvas = document.getElementById(this.id), this.context = this.canvas.getContext("2d") }, t.prototype.createCanvas = function (t, e) { this.canvas = document.createElement("canvas"), this.context = this.canvas.getContext("2d"), this.canvas.width = t, this.canvas.height = e }, t.prototype.render = function () { this.draw() }, t }();